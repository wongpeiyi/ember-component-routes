<h1>ComponentRoute</h1>

{{#code-block numbers=false}}
import { ComponentRoute, ComponentRouteMixin } from 'ember-component-routes'
{{/code-block}}

<p>
  <strong>ember-component-routes</strong> exports the <code>ComponentRouteMixin</code>, as well as <code>ComponentRoute</code> (an Ember <code>Route</code> that extends the mixin) for convenience.
</p>

{{!-- attributes --}}

<h2 id="attributes">
  attributes
  <span class="args">(model, params, actions)</span>
</h2>

<ul class="args-definition">
  <li>
    <strong>model</strong>
    <em>Object</em>
    Return value of the <code>model</code> hook
  </li>
  <li>
    <strong>params</strong>
    <em>Object</em>
    Positional and query parameters; value of <code>this.paramsFor(this.routeName)</code>
  </li>
  <li>
    <strong>actions</strong>
    <em>Object</em>
    Actions defined on this route, as a POJO of closure actions
  </li>
  <li class="args-definition__returns">
    <strong>Returns</strong>
    <em>Object</em>
    POJO of attributes to be set on the rendered component
  </li>
</ul>

<p>
  The <code>attributes</code> hook receives the result of the <code>model</code> hook, the route's positional and query parameters, and the route's actions as closures. It then calls the <code>renderComponents</code> hook, and sets the return value of the <code>attributes</code> hook on all components rendered by this route.
</p>

<p>
  The hook is called after the <code>model</code> hooks resolve. Any query param or positional param change will refresh this flow, calling the hook again and passing the new attributes to rendered components.
</p>

<p>
  If not overridden, the hook defaults to:
</p>

{{#code-block numbers=false type="js"}}
attributes(model, params, actions) {
  return { model, params, actions };
}
{{/code-block}}

{{!-- currentAttributes --}}

<h2 id="currentAttributes">currentAttributes</h2>

<p>
  The most recent result of the <code>attributes</code> hook can be accessed via the <code>currentAttributes</code> property on the route.
</p>

{{!-- queryParams --}}

<h2 id="queryParams">
  queryParams
</h2>

<p>
  The classic Ember <a href="https://emberjs.com/api/ember/release/classes/Route/properties/queryParams?anchor=queryParams" target="_blank" rel="noopener">query params configuration options</a>, with slight modifications &mdash; only <code>as</code> and <code>refreshModel</code> are preserved, while <code>defaultValue</code> is newly added:
</p>

{{#code-block type="js" numbers=false}}
queryParams: {
  // Property key in the `params` hash argument in the `attributes` hook,
  // or in the result of `paramsFor`
  page: {

    // (Same as classic Ember) URL key
    as: 'page',

    // (Same as classic Ember) Re-triggers model hooks on change if true
    refreshModel: false,

    // Sets the default value of the query param. This will be the property's
    // value if the query param is not included in the URL query string
    defaultValue: undefined

  }
}
{{/code-block}}

{{!-- refreshAttributes --}}

<h2 id="refreshAttributes">
  refreshAttributes
  <span class="args">()</span>
</h2>

<p>
  If necessary, you can call <code>refreshAttributes()</code> from the route to re-trigger the <code>attributes</code> hook, which will in turn call the <code>renderComponents</code> hook.
</p>

{{!-- renderComponents --}}

<h2 id="renderComponents">
  renderComponents
  <span class="args">()</span>
</h2>

<p>
  The <code>renderComponents</code> hook is analogous to the classic
  <code><a href="https://emberjs.com/api/ember/release/classes/Route/methods/renderTemplate?anchor=renderTemplate" target="_blank" rel="noopener">renderTemplate</a></code>
  hook. It allows you to define one or more <code>renderComponent</code> calls when the route is entered, or when attributes change.
</p>

<p>
  If not overridden, the hook defaults to:
</p>

{{#code-block numbers=false}}
renderComponents() {
  this.renderComponent(this.routeName);
}
{{/code-block}}

<p>
  Note: as Ember only recognizes components names with hyphens, a <code>'post'</code> route, for example, will not be able to render a component by default. However, an <code>'all-posts'</code> route or a <code>'post/comment'</code> route will be able to.
</p>

{{!-- renderComponent --}}

<h2 id="renderComponent">
  renderComponent
  <span class="args">(componentName, opts)</span>
</h2>

<ul class="args-definition">
  <li>
    <strong>componentName</strong>
    <em>String</em>
    Name of component to render
  </li>
  <li>
    <strong>opts</strong>
    <em>Object</em>
    Options
    <ul>
      <li>
        <code>into</code> <em>String</em> Name of template or component containing the
        <code>component-outlet</code> to render into. Defaults to this route's parent
        template
      </li>
      <li>
        <code>outlet</code> <em>String</em> Name of the <code>component-outlet</code> to render into. Defaults to <code>'main'</code>
      </li>
    </ul>
  </li>
</ul>

<p>
  The <code>renderComponent</code> method is analogous to the classic
  <code><a href="https://emberjs.com/api/ember/release/classes/Route/methods/render?anchor=render" target="_blank" rel="noopener">render</a></code>
  method, except that it renders a component by name. The method accepts similar arguments and behaves in the same way:
</p>


{{#code-block numbers=false}}
this.renderComponent('post-page', { into: 'application', outlet: 'main' });
{{/code-block}}

<p>
  The above default options will render the <code>post-page</code> component into the application template containing the <code>component-outlet</code> named <code>'main'</code> (which is the default name).
</p>

<p>
  For example, if you have two <code>component-outlets</code> in a single template, you can target one by doing:
</p>

{{#code-block type="htmlbars" title="index-page/template.hbs"}}
&#123;&#123;component-outlet&#125;&#125;

&#123;&#123;component-outlet 'sidebar'&#125;&#125;
{{/code-block}}


{{#code-block type="js" numbers=false}}
this.renderComponent('post-page', {
  into: 'parent-page',
  outlet: 'sidebar'
});
{{/code-block}}


<footer>
  {{link-to "Component" "api-component"}}
</footer>
